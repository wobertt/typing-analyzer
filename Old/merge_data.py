import main


processed_data = [['a', 145.49, 145.49, 1.0, 2], ['about', 145.56, 145.56, 1.0, 2], ['again', 237.0, 237.0, 1.0, 1], ['against', 201.0, 201.0, 1.0, 1], ['all', 144.99, 144.99, 1.0, 2], ['also', 210.0, 210.0, 1.0, 1], ['and', 180.0, 180.0, 1.0, 1], ['another', 183.0, 183.0, 1.0, 1], ['any', 90.05, 180.1, 0.5, 2], ['around', 229.0, 229.0, 1.0, 1], ['as', 220.79, 220.79, 1.0, 2], ['ask', 269.8, 269.8, 1.0, 2], ['at', 88.0, 88.0, 1.0, 1], ['back', 202.02, 202.02, 1.0, 3], ['be', 170.0, 170.0, 1.0, 1], ['because', 201.0, 201.0, 1.0, 1], ['become', 210.0, 210.0, 1.0, 1], ['between', 156.0, 156.0, 1.0, 1], ['by', 231.0, 231.0, 1.0, 1], ['call', 197.47, 197.47, 1.0, 2], ['can', 225.0, 225.0, 1.0, 1], ['change', 254.0, 254.0, 1.0, 1], ['child', 192.17, 192.17, 1.0, 3], ['come', 170.01, 170.01, 1.0, 3], ['day', 226.0, 226.0, 1.0, 1], ['develop', 197.0, 197.0, 1.0, 1], ['do', 158.0, 158.0, 1.0, 1], ['down', 194.0, 194.0, 1.0, 1], ['during', 195.98, 195.98, 1.0, 2], ['each', 230.0, 230.0, 1.0, 1], ['early', 265.0, 265.0, 1.0, 1], ['end', 176.72, 176.72, 1.0, 2], ['even', 197.0, 197.0, 1.0, 1], ['fact', 168.0, 168.0, 1.0, 1], ['find', 240.51, 240.51, 1.0, 2], ['follow', 148.0, 148.0, 1.0, 1], ['for', 203.4, 203.4, 1.0, 2], ['from', 282.0, 282.0, 1.0, 1], ['general', 207.0, 207.0, 1.0, 1], ['go', 211.0, 211.0, 1.0, 1], ['govern', 203.0, 203.0, 1.0, 1], ['have', 294.0, 294.0, 1.0, 1], ['help', 203.08, 203.08, 1.0, 2], ['high', 208.98, 208.98, 1.0, 2], ['home', 64.0, 64.0, 1.0, 1], ['house', 226.0, 226.0, 1.0, 1], ['how', 214.0, 214.0, 1.0, 1], ['if', 207.68, 207.68, 1.0, 2], ['increase', 171.0, 171.0, 1.0, 1], ['know', 232.0, 232.0, 1.0, 1], ['lead', 130.0, 130.0, 1.0, 1], ['leave', 217.0, 217.0, 1.0, 1], ['life', 253.0, 253.0, 1.0, 1], ['like', 157.5, 157.5, 1.0, 2], ['little', 173.0, 173.0, 1.0, 1], ['look', 139.0, 139.0, 1.0, 1], ['make', 176.3, 176.3, 1.0, 2], ['may', 205.41, 205.41, 1.0, 2], ['mean', 230.0, 230.0, 1.0, 1], ['might', 160.94, 160.94, 1.0, 2], ['never', 169.07, 169.07, 1.0, 2], ['new', 189.0, 189.0, 1.0, 1], ['not', 0.0, 152.0, 0.0, 1], ['number', 163.0, 163.0, 1.0, 1], ['of', 145.0, 145.0, 1.0, 1], ['off', 147.49, 147.49, 1.0, 2], ['on', 264.0, 264.0, 1.0, 1], ['one', 199.8, 199.8, 1.0, 2], ['or', 167.0, 167.0, 1.0, 1], ['other', 199.3, 199.3, 1.0, 2], ['out', 232.0, 232.0, 1.0, 1], ['over', 193.96, 193.96, 1.0, 2], ['own', 171.0, 171.0, 1.0, 1], ['people', 185.0, 185.0, 1.0, 1], ['person', 272.0, 272.0, 1.0, 1], ['place', 273.0, 273.0, 1.0, 1], ['plan', 183.0, 183.0, 1.0, 1], ['play', 242.0, 242.0, 1.0, 1], ['present', 200.0, 200.0, 1.0, 1], ['problem', 169.0, 169.0, 1.0, 1], ['real', 291.77, 291.77, 1.0, 2], ['run', 243.96, 243.96, 1.0, 2], ['say', 251.11, 251.11, 1.0, 2], ['school', 140.0, 140.0, 1.0, 1], ['see', 136.58, 136.58, 1.0, 2], ['seem', 146.68, 146.68, 1.0, 2], ['set', 243.93, 243.93, 1.0, 2], ['she', 159.38, 159.38, 1.0, 2], ['should', 174.17, 174.17, 1.0, 3], ['since', 228.0, 228.0, 1.0, 1], ['so', 186.0, 186.0, 1.0, 1], ['some', 234.0, 234.0, 1.0, 1], ['state', 189.68, 189.68, 1.0, 2], ['such', 205.0, 205.0, 1.0, 1], ['system', 205.0, 205.0, 1.0, 1], ['take', 192.09, 192.09, 1.0, 2], ['that', 230.0, 230.0, 1.0, 1], ['the', 112.25, 224.5, 0.5, 2], ['these', 173.46, 173.46, 1.0, 2], ['thing', 195.53, 195.53, 1.0, 2], ['think', 195.0, 195.0, 1.0, 1], ['this', 232.72, 232.72, 1.0, 2], ['through', 225.31, 225.31, 1.0, 2], ['use', 207.0, 207.0, 1.0, 1], ['want', 63.09, 126.18, 0.5, 2], ['way', 303.0, 303.0, 1.0, 1], ['well', 188.0, 188.0, 1.0, 1], ['where', 194.0, 194.0, 1.0, 1], ['who', 216.0, 216.0, 1.0, 1], ['will', 115.78, 115.78, 1.0, 3], ['without', 149.42, 149.42, 1.0, 3], ['work', 207.0, 207.0, 1.0, 1], ['you', 177.59, 177.59, 1.0, 2]]


def merge_data():
    new_data = main.process_file("wobert test 3.5.txt")

    for data_row in processed_data:
        if data_row[0] not in [new_data_row[0] for new_data_row in new_data]:
            new_data.append(data_row)
        else:
            index = [new_data_row[0] for new_data_row in new_data].index(data_row[0])
            word, wpm, raw_wpm, accuracy, amount_seen = new_data[index]

            total_amount_seen = amount_seen + data_row[4]
            raw_wpm = total_amount_seen / (amount_seen / raw_wpm + data_row[4] / data_row[2])
            accuracy = (accuracy*amount_seen + data_row[3]*data_row[4]) / total_amount_seen
            wpm = raw_wpm * accuracy

            new_data[index] = [word, round(wpm, 2), round(raw_wpm, 2), round(accuracy, 2), total_amount_seen]

    new_data.sort()

    return new_data


if __name__ == "__main__":
    main.print_output(merge_data())
